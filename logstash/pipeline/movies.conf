# logstash/pipeline/movies.conf

input {
  file {
    path => "/usr/share/logstash/dataset/movies.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }
}

filter {
  csv {
    separator => ","
    columns => ["movieId", "title", "genres"]
    skip_header => "true"
  }

  grok {
    match => {
      "title" => "(?<title>.*) \\((?<year>\\d{4})\\)"
    }
    overwrite => [ "title" ]
  }

  mutate {
    split => { "genres" => "|" }
  }

  # Get imdbId from links.csv
  translate {
    field => "movieId"
    destination => "imdbId"
    dictionary_path => "/usr/share/logstash/dataset/links.csv"
    fallback => "FAIL"
  }

  if [imdbId] == "FAIL" {
    drop {}
  }

  # Optional: Enrich from TMDb API
  # Adjust the "YOUR_API_KEY" and data you want to fetch
  http {
    url => "https://api.themoviedb.org/3/find/tt%{imdbId}"
    verb => "GET"
    query => {
      "api_key" => "7eec2293a995c4425f6088ef832026b2"
      "language" => "en-US"
      "external_source" => "imdb_id"
    }
    target_body => "body"
    # The default "automatic_retries" might be enough, but you can set your own if you get rate-limited
    # automatic_retries => 3
  }

  if [body][movie_results] and [body][movie_results][0] {
    mutate {
      add_field => {
        "description" => "%{[body][movie_results][0][overview]}"
        "popularity"  => "%{[body][movie_results][0][popularity]}"
        "vote_count"  => "%{[body][movie_results][0][vote_count]}"
        "vote_average" => "%{[body][movie_results][0][vote_average]}"
        "adult"        => "%{[body][movie_results][0][adult]}"
      }
    }
  }

  mutate {
    convert => {
      "year" => "integer"
      "popularity" => "float"
      "vote_count" => "integer"
      "vote_average" => "float"
      "adult" => "boolean"
    }
    remove_field => ["body", "message", "host", "path", "@version", "@timestamp", "ecs"]
  }
}

output {
  elasticsearch {
    hosts => ["http://es01:9200"]
    index => "movies"
    # If you have a custom template:
    template => "/usr/share/logstash/config/templates/movies_template.json"
    template_name => "movies"
    template_overwrite => true
  }
  stdout { codec => rubydebug }
}
